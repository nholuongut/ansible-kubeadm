---
- name: 'Find if kubectl is present'
  command: which kubectl
  register: found_kubectl
  changed_when: false
  check_mode: false
  failed_when: found_kubectl.rc not in [0, 1]

- name: 'get kubeadm configmap if cluster running'
  command: kubectl get cm -o jsonpath='{.data.ClusterConfiguration}' -n kube-system kubeadm-config
  run_once: true
  changed_when: false
  check_mode: false
  delegate_to: '{{ groups.cp_running|first }}'
  register: in_cluster_kubeadm_config
  when:
    - found_kubectl.rc == 0
    - groups.cp_running|default([])|length > 0
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: 'Display current kubeadm-config raw output'
  debug:
    var: in_cluster_kubeadm_config
    verbosity: 1
  run_once: true

- name: 'Find kubeadm config'
  set_fact:
    cluster_config_orig: '{{ cluster_config_orig }}'
    current_cp_version: >-
      {{ cluster_config_orig.get("kubernetesVersion", "")
         |regex_replace("v(.*)", "\g<1>") }}
  run_once: true
  vars:
    cluster_config_orig: >-
      {%- if in_cluster_kubeadm_config is skipped -%}
         {}
      {%- else -%}
        {{ in_cluster_kubeadm_config.stdout|from_yaml }}
      {%- endif -%}

- name: 'Display current extracted ClusterConfig'
  debug:
    var: cluster_config_orig
    verbosity: 1
  run_once: true

- name: 'get kubelet configmap if cluster running'
  command: >-
    kubectl -n kube-system get cm
    -o jsonpath='{.data.kubelet}'
    kubelet-config-{{ (current_cp_version|regex_findall('(?:\d+)'))[0:2]|join('.') }}
  run_once: true
  changed_when: false
  check_mode: false
  delegate_to: '{{ groups.cp_running|first }}'
  register: in_cluster_kubelet_config
  when:
    - found_kubectl.rc == 0
    - groups.cp_running|default([])|length > 0
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: 'get kubeproxy configmap if cluster running'
  command: >-
    kubectl -n kube-system get cm
    -o jsonpath='{.data.config\.conf}'
    kube-proxy
  run_once: true
  changed_when: false
  check_mode: false
  delegate_to: '{{ groups.cp_running|first }}'
  register: in_cluster_kubeproxy_config
  when:
    - found_kubectl.rc == 0
    - groups.cp_running|default([])|length > 0
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: 'Set default kubeadm-config if empty set'
  set_fact:
    control_plane_endpoint: >-
      {% if control_plane_endpoint is defined -%}
        {{ control_plane_endpoint }}
      {%- elif cluster_config_orig.controlPlaneEndpoint is defined -%}
        {{ cluster_config_orig.controlPlaneEndpoint }}
      {%- endif -%}
    kubelet_config_orig: >-
      {%- if in_cluster_kubelet_config is skipped -%}
        {}
      {%- else -%}
        {{ in_cluster_kubelet_config.stdout|from_yaml }}
      {%- endif -%}
    kubeproxy_config_orig: >-
      {%- if in_cluster_kubeproxy_config is skipped -%}
        {}
      {%- else -%}
        {{ in_cluster_kubeproxy_config.stdout|from_yaml }}
      {%- endif -%}


- name: 'Display computed "control_plane_endpoint'
  debug:
    var: control_plane_endpoint
    verbosity: 1
  run_once: true

- name: 'Display current Kubelet config'
  debug:
    var: kubelet_config_orig
    verbosity: 1
  run_once: true

- name: 'Display current KubeProxy config'
  debug:
    var: kubeproxy_config_orig
    verbosity: 1
  run_once: true

- name: 'Raise if condition unmet'
  fail:
    msg: >-
      "control_plane_endpoint is not set and you provided multi-nodes control plane.
      You need a reliable way to contact all the apiserver with a single endpoint.
  when: not control_plane_endpoint and ansible_play_hosts | length > 1

- name: 'merge requested kubeadm config with existing one'
  set_fact:
    cluster_config_final: >-
      {%- if control_plane_endpoint|string|lower == 'false' -%}
         {%- set _ = cluster_config_orig.pop('controlPlaneEndpoint', false) -%}
      {%- elif control_plane_endpoint -%}
         {%- set cluster_config = cluster_config|combine({'controlPlaneEndpoint': control_plane_endpoint}) -%}
      {%- endif -%}
      {{ cluster_config_orig|default(default_kubeadm_config, true)|combine(cluster_config, recursive=true) }}
    kubelet_config_final: >-
      {{ kubelet_config_orig|default(default_kubelet_config, true)|combine(kubelet_config, recursive=true) }}
    kubeproxy_config_final: >-
      {{ kubeproxy_config_orig|default(default_kubeproxy_config, true)|combine(kubeproxy_config, recursive=true) }}

- name: 'Display computed ClusterConfig'
  debug:
    var: cluster_config_final
    verbosity: 1
  run_once: true

- name: 'Display computed Kubelet config'
  debug:
    var: kubelet_config_final
    verbosity: 1
  run_once: true
